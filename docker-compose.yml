version: "3.8"
services:
  db:
    container_name: postgres_c
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
  pgadmin:
    container_name: pgadmin4_c
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres_exporter_c
    environment:
      DATA_SOURCE_NAME: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres_db:5432/${POSTGRES_DB}?sslmode=disable"
    ports:
      - "9187:9187"  # Expose metrics at port 9187
    networks:
      - monitoring
    depends_on:
      - db
  redis:
    image: redis:6.0.7
    container_name: redis_c
    restart: always
    volumes:
      - redis_volume_data:/data
    ports:
      - 6380:6380
  redis_insight:
    image: redislabs/redisinsight:1.14.0
    container_name: redis_insight_c
    restart: always
    ports:
      - 8001:8001
    volumes:
      - redis_insight_volume_data:/db
  redis_exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis_exporter_c
    environment:
      REDIS_ADDR: redis:6380
    ports:
      - "9122:9122"  # Expose Redis metrics on port 9122
    networks:
      - monitoring
    depends_on:
      - redis
  prometheus:
    image: prom/prometheus
    container_name: ${PROMETHEUS_CONTAINER}
    volumes:
      - "./config/prometheus.yml:/etc/prometheus/prometheus.yml"
    ports:
      - ${PROMETHEUS_PORT}:${PROMETHEUS_PORT}
    networks:
      - monitoring
    depends_on:
      - node_exporter
      - redis_exporter
      - postgres_exporter
  grafana:
    image: grafana/grafana
    container_name: ${GRAFANA_CONTAINER}
    ports:
      - ${GRAFANA_PORT}:${GRAFANA_PORT}
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - PROMETHEUS_CONTAINER=${PROMETHEUS_CONTAINER}
      - PROMETHEUS_PORT=${PROMETHEUS_PORT}
    volumes:
      - ./config/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml  # Mounts the Grafana data source configuration file
      - ./config/dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yaml  # Mounts the Grafana dashboard configuration file
      - ./config/dashboard.json:/var/lib/grafana/dashboards/dashboard.json  # Mounts a Grafana dashboard definition file
    networks:
      - monitoring
    depends_on:
      - prometheus
  node_exporter:
    image: prom/node-exporter:latest
    container_name: ${NODE_EXPORTER_CONTAINER}
    ports:
      - ${NODE_EXPORTER_PORT}:${NODE_EXPORTER_PORT}
    volumes:
      - /proc:/host/proc:ro  # Mounts the /proc directory from the host into the container (read-only)
      - /sys:/host/sys:ro  # Mounts the /sys directory from the host into the container (read-only)
      - /:/rootfs:ro  # Mounts the root filesystem of the host into the container (read-only)    
    networks:
      - monitoring
# Networks
networks:
  monitoring:
    driver: bridge
volumes:
  redis_volume_data:
  redis_insight_volume_data:
  postgres_data:

